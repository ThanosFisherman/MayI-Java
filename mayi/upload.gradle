apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.thanosfisherman.mayi'
version = rootProject.ext.publishVersionName

def siteUrl = 'https://github.com/ThanosFisherman/MayI'
def gitUrl = 'https://github.com/ThanosFisherman/MayI.git'


install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'

            name 'MayI'
            description 'Yet another runtime permission library for Android'

            url siteUrl

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    id 'thanosfisherman'
                    name 'Thanos Psaridis'
                    email 'psaridis@gmail.com'
                }
            }

            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

if (project.rootProject.file("local.properties").exists()) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        configurations = ['archives']
        dryRun = false
        publish = true

        pkg {
            repo = "maven"
            name = "mayi"
            desc = 'Yet another runtime permission library for Android'
            websiteUrl = siteUrl
            //userOrg = 'thanosfisherman'
            vcsUrl = gitUrl
            licenses = ["Apache-2.0"]
            version {
                name = rootProject.ext.publishVersionName
                desc = 'MayI current version'
                released = new Date()
                vcsTag = rootProject.ext.publishVersionName
                //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            }
        }
    }
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}